name: CI/CD Pipeline for FastAPI

on:
  push:
    branches:
      - main  # Trigger deployment on push to main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_MASTER_PASSWORD=${{ secrets.DB_MASTER_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_INSTANCE_NAME=${{ secrets.DB_INSTANCE_NAME }}" >> .env
          echo "DB_DEFAULT=${{ secrets.DB_DEFAULT }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "ENDPOINT_NAME=${{ secrets.ENDPOINT_NAME }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env

      - name: Build Docker image
        run: |
          sudo docker build -t fastapi-app .

      - name: Log in to AWS ECR (Elastic Container Registry)
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
          skip-logout: false
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names fastapi-app || aws ecr create-repository --repository-name fastapi-app
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Tag Docker image
        run: |
          sudo docker tag fastapi-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fastapi-app:latest

      - name: Push Docker image to AWS ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fastapi-app:latest
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to AWS EC2
        env:
          AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          # Set AWS Credentials di runner
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region $AWS_REGION

          # Prepare SSH
          mkdir -p ~/.ssh
          echo "$AWS_SSH_KEY" > ~/.ssh/fastapi_key.pem
          chmod 600 ~/.ssh/fastapi_key.pem

          # Add EC2 instance to known hosts
          ssh-keyscan -H $EC2_PUBLIC_IP >> ~/.ssh/known_hosts

          # Deploy script with improved error handling and logging
          ssh -i ~/.ssh/fastapi_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << EOF
              # Export environment variables
              export AWS_REGION=$AWS_REGION
              export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID

              # Debug AWS Configuration
              aws configure list
              
              # Login ECR dengan cara eksplisit
              aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

              # Pull image
              docker pull "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/fastapi-app:latest"

              # Run container
              docker run -d \
                --restart unless-stopped \
                --name fastapi-cont \
                -p 8000:8000 \
                "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/fastapi-app:latest"
            EOSSH
