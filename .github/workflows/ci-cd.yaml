name: CI/CD Pipeline for FastAPI

on:
  push:
    branches:
      - main  # Trigger deployment on push to main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_MASTER_PASSWORD=${{ secrets.DB_MASTER_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_INSTANCE_NAME=${{ secrets.DB_INSTANCE_NAME }}" >> .env
          echo "DB_DEFAULT=${{ secrets.DB_DEFAULT }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "ENDPOINT_NAME=${{ secrets.ENDPOINT_NAME }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env

      - name: Build Docker image
        run: |
          docker build -t fastapi-app .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: fastapi-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        sudo docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        sudo docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        sudo docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        sudo docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to AWS EC2
        env:
          AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          # Prepare SSH
          mkdir -p ~/.ssh
          echo "$AWS_SSH_KEY" > ~/.ssh/fastapi_key.pem
          chmod 600 ~/.ssh/fastapi_key.pem

          # Add EC2 instance to known hosts
          ssh-keyscan -H $EC2_PUBLIC_IP >> ~/.ssh/known_hosts

          # Deploy script with improved error handling and logging
          ssh -v -i ~/.ssh/fastapi_key.pem ubuntu@$EC2_PUBLIC_IP << 'EOF'
            # Update package lists and install core dependencies
            sudo apt-get update -y
            sudo apt-get install -y \
              ca-certificates \
              curl \
              gnupg \
              lsb-release \
              software-properties-common

            # Remove existing Docker packages to prevent conflicts
            sudo apt-get remove -y docker docker-engine docker.io containerd runc || true

            # Add Docker's official GPG key
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

            # Set up Docker repository
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            # Install Docker and AWS CLI
            sudo apt-get update -y
            sudo apt-get install -y \
              docker-ce \
              docker-ce-cli \
              containerd.io \
              docker-compose-plugin \
              awscli

            # Ensure Docker service is running
            sudo systemctl start docker
            sudo systemctl enable docker

            # Add ubuntu user to docker group to avoid sudo for docker commands
            sudo usermod -aG docker ubuntu

            # Authenticate Docker with ECR
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            # Pull Docker image from ECR
            sudo docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/fastapi-app:latest
            
            # Stop and remove previous container if it exists
            sudo docker stop fastapi-container || true
            sudo docker rm fastapi-container || true

            # Run new Docker container with additional logging and restart policy
            sudo docker run -d \
              --restart unless-stopped \
              --name fastapi-container \
              -p 8000:8000 \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/fastapi-app:latest

            # Optional: Prune old Docker images to save disk space
            sudo docker image prune -f
          EOF

